(ns scicloj.scrapbook.vald
  (:require [clojure.string :as string]
            [tech.v3.datatype :as dtype])
  (:import (java.util Arrays)
           (io.grpc ManagedChannel
                    ManagedChannelBuilder)
           (org.vdaas.vald.api.v1.vald InsertGrpc
                                       InsertGrpc$InsertBlockingStub
                                       SearchGrpc
                                       SearchGrpc$SearchBlockingStub
                                       UpdateGrpc
                                       UpdateGrpc$UpdateBlockingStub
                                       RemoveGrpc
                                       RemoveGrpc$RemoveBlockingStub)
           (org.vdaas.vald.api.v1.payload Insert
                                          Insert$Config
                                          Insert$Request
                                          Search
                                          Search$Config
                                          Search$Request
                                          Search$Response
                                          Update
                                          Remove
                                          Object$Vector
                                          Object$Location
                                          Object$Distance)))

;; https://github.com/vdaas/vald-client-java/blob/main/examples/src/main/java/org/vdaas/vald/Client.java


(set! *warn-on-reflection* true)

(def current-vald-setup
  {:port 8081
   :dimension 784})

(defn new-client [host port]
  (let [channel (-> (ManagedChannelBuilder/forAddress host port)
                    .usePlaintext
                    .build)]
    {:istub (InsertGrpc/newBlockingStub channel)
     :sstub (SearchGrpc/newBlockingStub channel)
     :ustub (UpdateGrpc/newBlockingStub channel)
     :rstub (RemoveGrpc/newBlockingStub channel)}))

(def client
  (new-client "localhost" (:port current-vald-setup)))

(defn insert [client id v]
  (let [ovec (-> (Object$Vector/newBuilder)
                 (.setId id)
                 (.addAllVector v)
                 .build)
        icfg (-> (Insert$Config/newBuilder)
                 (.setSkipStrictExistCheck true)
                 .build)
        ireq (-> (Insert$Request/newBuilder)
                 (.setVector ovec)
                 (.setConfig icfg)
                 .build)]
    (.insert
     ^InsertGrpc$InsertBlockingStub (:istub client)
     ireq)))

(Search$Request/newBuilder)

(defn search [client v]
  (let [scfg (-> (Search$Config/newBuilder)
                 (.setNum 10)
                 (.setRadius (float -1.0))
                 (.setEpsilon (float 0.01))
                 (.setTimeout 3000000000)
                 .build)
        sreq-builder (Search$Request/newBuilder)
        _ (->> v
               (run! (fn [x]
                       (-> sreq-builder
                           (.addVector x)))))
        sreq (-> sreq-builder
                 (.setConfig scfg)
                 .build)]
    (.search
     ^SearchGrpc$SearchBlockingStub (:sstub client)
     sreq)))

(comment
  (->> (range (:dimension current-vald-setup))
       (map float)
       (into-array)
       Arrays/asList
       (insert client (str "vector_id_" (rand-int 999)))
       ((fn [^Object$Location ol]
          [{:uuid (.getUuid ol)}
           (bean ol)]))))


(comment
  (->> (range (:dimension current-vald-setup))
       (map float)
       (into-array)
       Arrays/asList
       (search client)
       bean
       ;; .getResultsOrBuilderList
       ;; (map (fn [^Object$Distance od]
       ;;        [{:id (.getId od)
       ;;          :distance (.getDistance od)}]))
       ))
