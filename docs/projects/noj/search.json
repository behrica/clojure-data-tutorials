[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Noj tutorials",
    "section": "",
    "text": "This is part of the Scicloj Clojure Data Scrapbook.\n\n\n\n\n\n\n1 Preface\nNoj (short for Scinojure) is an opinionated way to use the emerging Clojure data stack. It collects a few of the relevant libraries together and addes some layers of composition on top of them.\n\n\n\n\nsource: projects/noj/notebooks/index.clj",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preface</span>"
    ]
  },
  {
    "objectID": "ml.html",
    "href": "ml.html",
    "title": "2  Machine learning - DRAFT",
    "section": "",
    "text": "2.1 Linear regression\nWe will explore the Iris dataset:\n_unnamed [5 5]:\nA Metamorph pipeline for linear regression:\nTraining and evaluating the pipeline on various subsets:\nPrinting one of the trained models (note that the Smile regression model is recognized by Kindly and printed correctly):",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Machine learning - DRAFT</span>"
    ]
  },
  {
    "objectID": "ml.html#linear-regression",
    "href": "ml.html#linear-regression",
    "title": "2  Machine learning - DRAFT",
    "section": "",
    "text": "(tc/head datasets/iris)\n\n\n\n\n\n\n\n\n\n\n\n\n:sepal-length\n:sepal-width\n:petal-length\n:petal-width\n:species\n\n\n\n\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n\n\n\n(def additive-pipeline\n  (ml/pipeline\n   (mm/set-inference-target :sepal-length)\n   (mm/drop-columns [:species])\n   {:metamorph/id :model}\n   (mm/model {:model-type :smile.regression/ordinary-least-square})))\n\n\n\n(def evaluations\n  (ml/evaluate-pipelines\n   [additive-pipeline]\n   (ds/split-&gt;seq datasets/iris :holdout)\n   ml/rmse\n   :loss\n   {:other-metrices [{:name :r2\n                      :metric-fn fastmath.stats/r2-determination}]}))\n\n\n\n(-&gt; evaluations\n    flatten\n    first\n    :fit-ctx\n    :model\n    ml/thaw-model)\n\n\nLinear Model:\n\nResiduals:\n       Min          1Q      Median          3Q         Max\n   -0.7870     -0.2330      0.0191      0.1918      0.8921\n\nCoefficients:\n                  Estimate Std. Error    t value   Pr(&gt;|t|)\nIntercept           1.8173     0.3337     5.4454     0.0000 ***\nsepal-width         0.6625     0.0869     7.6273     0.0000 ***\npetal-length        0.7158     0.0749     9.5532     0.0000 ***\npetal-width        -0.5929     0.1640    -3.6144     0.0005 ***\n---------------------------------------------------------------------\nSignificance codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.3308 on 96 degrees of freedom\nMultiple R-squared: 0.8280,    Adjusted R-squared: 0.8227\nF-statistic: 154.0902 on 4 and 96 DF,  p-value: 1.435e-36\n\n\n\n\n\nsource: projects/noj/notebooks/ml.clj",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Machine learning - DRAFT</span>"
    ]
  },
  {
    "objectID": "ggplot.html",
    "href": "ggplot.html",
    "title": "3  Exploring ggplot",
    "section": "",
    "text": "This is part of the Scicloj Clojure Data Scrapbook.\n\n\n\n\n\nfollowing cxplot’s internal ggplot.as.list in representing a plot as a data structure.\n\n(ns ggplot\n  (:require [clojisr.v1.r :as r :refer [r r$ r-&gt;clj]]\n            [clojisr.v1.applications.plotting :as plotting]\n            [scicloj.kindly.v4.kind :as kind]))\n\n\n(r/library \"ggplot2\")\n\n\n[1] \"ggplot2\"   \"Rserve\"    \"stats\"     \"graphics\"  \"grDevices\" \"utils\"    \n[7] \"datasets\"  \"methods\"   \"base\"     \n\n\n\n(def plot\n  (r \"(ggplot(mpg, aes(cty, hwy, color=factor(cyl)))\n         + geom_point()\n         + stat_smooth(method=\\\"lm\\\")\n         + facet_wrap(~cyl))\"))\n\n\n(-&gt; plot\n    plotting/plot-&gt;svg\n    kind/html)\n\n\n\nn\n\n(-&gt; plot\n    r-&gt;clj\n    (dissoc :data))\n\n\n{:layers [nil nil],\n :scales nil,\n :mapping {:x [~ cty], :y [~ hwy], :colour [~ [factor cyl]]},\n :theme [],\n :coordinates nil,\n :facet nil,\n :plot_env nil,\n :labels {:x [\"cty\"], :y [\"hwy\"], :colour [\"factor(cyl)\"]}}\n\n\n(defn gg-facet [ggplot]\n  (let [f (-&gt; ggplot\n              (r$ 'facet)\n              (r$ 'params)\n              (r$ 'facets))]\n    (when (-&gt; `(is.null ~f)\n              r\n              r-&gt;clj)\n      (let [facet (r `(ls ~f))]\n        {:facet facet\n         :facet-levels (-&gt; plot\n                           (r$ 'data)\n                           (r/bra facet))}))))\n\n\n(-&gt; plot\n    gg-facet\n    (update-vals r-&gt;clj))\n\n\n\n\n{\n\n\n\n:facet [\"cyl\"]\n\n\n\n\n\n\n:facet-levels\n\n\n\n\n\n\n\n\n_unnamed [234 1]:\n\n\n\n\n\n:cyl\n\n\n\n\n\n\n4\n\n\n\n\n4\n\n\n\n\n4\n\n\n\n\n4\n\n\n\n\n6\n\n\n\n\n6\n\n\n\n\n6\n\n\n\n\n4\n\n\n\n\n4\n\n\n\n\n4\n\n\n\n\n…\n\n\n\n\n4\n\n\n\n\n4\n\n\n\n\n5\n\n\n\n\n5\n\n\n\n\n4\n\n\n\n\n4\n\n\n\n\n4\n\n\n\n\n4\n\n\n\n\n6\n\n\n\n\n6\n\n\n\n\n6\n\n\n\n\n\n\n\n\n\n\n\n}\n\n\n\n\n(r/require-r '[base])\n\n\nnil\n\n\n(defn -&gt;clj\n  ([r-obj avoid]\n   (-&gt;clj r-obj avoid []))\n  ([r-obj avoid path]\n   (prn path)\n   (let [relevant-names (some-&gt;&gt; r-obj\n                                 r.base/names\n                                 r-&gt;clj\n                                 (filter (complement avoid)))]\n     (cond\n       ;;\n       ;; a named list or a ggproto object\n       (seq relevant-names) (-&gt;&gt; relevant-names\n                                 (map (fn [nam]\n                                        [(keyword nam) (-&gt; r-obj\n                                                           (r$ nam)\n                                                           (-&gt;clj avoid\n                                                                  (conj path nam)))]))\n                                 (into {}))\n       ;;\n       ;; a ggproto method\n       (-&gt; r-obj\n           r.base/class\n           r-&gt;clj\n           first\n           (= \"ggproto_method\"))\n       :ggproto-method\n       ;;\n       ;; an unnamed list\n       (-&gt; r-obj\n           r.base/is-list\n           r-&gt;clj\n           first)\n       (-&gt; r-obj\n           r.base/length\n           r-&gt;clj\n           first\n           range\n           (-&gt;&gt; (mapv (fn [i]\n                        (prn [path (inc i)])\n                        (-&gt; r-obj\n                            (r/brabra (inc i))\n                            (-&gt;clj avoid\n                                   (conj path [i])))))))\n       ;;\n       (r.base/is-function r-obj) :function\n       (r.base/is-atomic r-obj) (r-&gt;clj r-obj)\n       :else r-obj))))\n\n\n(-&gt; plot\n    (-&gt;clj #{\"data\" \"plot_env\"}))\n\n\n{:layers\n [{:aes_params [],\n   :stat {:compute_layer :ggproto-method, :super :ggproto-method},\n   :show.legend :function,\n   :mapping :function,\n   :super :ggproto-method,\n   :computed_stat_params {:na.rm :function},\n   :inherit.aes :function,\n   :geom_params {:na.rm :function},\n   :geom\n   {:non_missing_aes :function,\n    :draw_key :ggproto-method,\n    :default_aes\n    {:shape :function,\n     :colour :function,\n     :size :function,\n     :fill :function,\n     :alpha :function,\n     :stroke :function},\n    :super :ggproto-method,\n    :required_aes :function,\n    :draw_panel :ggproto-method},\n   :stat_params {:na.rm :function},\n   :constructor :function,\n   :computed_mapping {:x :function, :y :function, :colour :function},\n   :position {:compute_layer :ggproto-method, :super :ggproto-method},\n   :computed_geom_params {:na.rm :function}}\n  {:aes_params [],\n   :stat\n   {:extra_params :function,\n    :super :ggproto-method,\n    :compute_group :ggproto-method,\n    :required_aes :function,\n    :setup_params :ggproto-method,\n    :dropped_aes :function},\n   :show.legend :function,\n   :mapping :function,\n   :super :ggproto-method,\n   :computed_stat_params\n   {:na.rm :function,\n    :method :function,\n    :n :function,\n    :orientation :function,\n    :level :function,\n    :fullrange :function,\n    :flipped_aes :function,\n    :se :function,\n    :formula :function,\n    :method.args [],\n    :span :function},\n   :inherit.aes :function,\n   :geom_params\n   {:se :function, :na.rm :function, :orientation :function},\n   :geom\n   {:setup_params :ggproto-method,\n    :super :ggproto-method,\n    :draw_key :ggproto-method,\n    :extra_params :function,\n    :required_aes :function,\n    :draw_group :ggproto-method,\n    :optional_aes :function,\n    :rename_size :function,\n    :setup_data :ggproto-method,\n    :default_aes\n    {:colour :function,\n     :fill :function,\n     :linewidth :function,\n     :linetype :function,\n     :weight :function,\n     :alpha :function}},\n   :stat_params\n   {:na.rm :function,\n    :method :function,\n    :n :function,\n    :orientation :function,\n    :level :function,\n    :fullrange :function,\n    :se :function,\n    :formula :function,\n    :method.args [],\n    :span :function},\n   :constructor {: :function, :method :function},\n   :computed_mapping {:x :function, :y :function, :colour :function},\n   :position {:compute_layer :ggproto-method, :super :ggproto-method},\n   :computed_geom_params\n   {:se :function,\n    :na.rm :function,\n    :orientation :function,\n    :flipped_aes :function}}],\n :scales {:scales [], :super :ggproto-method},\n :mapping {:x :function, :y :function, :colour :function},\n :theme [],\n :coordinates\n {:expand :function,\n  :clip :function,\n  :limits {:x :function, :y :function},\n  :super :ggproto-method,\n  :default :function},\n :facet\n {:params\n  {:dir :function,\n   :nrow :function,\n   :as.table :function,\n   :free {:x :function, :y :function},\n   :drop :function,\n   :strip.position :function,\n   :ncol :function,\n   :facets {:cyl :function},\n   :labeller :function},\n  :shrink :function,\n  :super :ggproto-method},\n :labels {:x :function, :y :function, :colour :function}}\n\n\n\n\n\nsource: projects/noj/notebooks/ggplot.clj",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exploring ggplot</span>"
    ]
  }
]