
---
format:
  html: {toc: true, toc-depth: 4, theme: spacelab, output-file: scicloj.scrapbook.hdf.html}
highlight-style: solarized
code-block-background: true
include-in-header: {text: '<link rel = "icon" href = "data:," />'}

---
<style>table {
  border-style: thin;
}
th, td {
  padding: 6px;
}
td {
  text-align: left;
}
th {
  text-align: center;
  background-color: #ddd;
}
tr:nth-child(even) {
  background-color: #f6f6f6;
}
</style><style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<script src="scicloj.scrapbook.hdf_files/md-default3.js" type="text/javascript"></script><script src="scicloj.scrapbook.hdf_files/md-default4.js" type="text/javascript"></script>
<table><tr><td>This is part of the Scicloj <a href="https://scicloj.github.io/clojure-data-scrapbook/">Clojure Data Scrapbook</a>.</td><a href="https://scicloj.github.io/clojure-data-scrapbook/"><img align="left" alt="SciCloj logo" src="https://scicloj.github.io/sci-cloj-logo-transparent.png" width="40" /></a></tr></table>


# Reading HDF files
Original discussion at the Clojurians Zulip [chat](https://scicloj.github.io/docs/community/chat/): [#data-science > import hdf files](https://clojurians.zulipchat.com/#narrow/stream/151924-data-science/topic/import.20hdf.20files).


<div class="sourceClojure">
```clojure
(ns scicloj.scrapbook.hdf
  (:require [babashka.fs :as fs]
            [tech.v3.tensor :as tensor]
            [clojure.java.io :as io]
            [clojure.string :as string]
            [scicloj.noj.v1.vis.image :as vis.image]
            [tech.v3.datatype.functional :as fun])
  (:import io.jhdf.HdfFile
           java.io.File))
```
</div>



<div class="sourceClojure">
```clojure
(set! *warn-on-reflection* true)
```
</div>



<div class="printedClojure">
```clojure
true

```
</div>


We will use the followig function
to read an [HDF](https://en.wikipedia.org/wiki/Hierarchical_Data_Format) file
using [jHDF](https://github.com/jamesmudd/jhdf/),
and convert it to [dtype-next](https://github.com/cnuernber/dtype-next) tensors.


<div class="sourceClojure">
```clojure
(defn hdf5->tensors [path]
  (let [file ^File (io/file path)
        hdf-file ^HdfFile (HdfFile. file)
        children ^java.util.Map (.getChildren hdf-file)]
    (->> children
         keys
         (mapv (fn [key]
                 (let [child ^io.jhdf.dataset.ContiguousDatasetImpl (.get children key)
                       knew (keyword (first (string/split key
                                                          #" ")))]
                   {:key key
                    :data (-> child
                              .getData
                              tensor/->tensor)}))))))
```
</div>


Let us apply the function to a test file:


<div class="sourceClojure">
```clojure
(def tensors
  (hdf5->tensors "data/test.h5"))
```
</div>



<div class="sourceClojure">
```clojure
(count tensors)
```
</div>



<div class="printedClojure">
```clojure
20

```
</div>



<div class="sourceClojure">
```clojure
(take 3 tensors)
```
</div>



<div class="printedClojure">
```clojure
({:key "0", :data #tech.v3.tensor&lt;int32&gt;[600 800]
[[112 110 111 ... 114 118 124]
 [105 112 106 ... 115 120 119]
 [107 109 108 ... 117 123 115]
 ...
 [132 138 134 ... 109 107 109]
 [130 129 129 ... 115 111 103]
 [134 135 134 ... 110 111 110]]}
 {:key "1", :data #tech.v3.tensor&lt;int32&gt;[600 800]
[[124 120 121 ... 117 121 124]
 [118 123 117 ... 118 122 121]
 [120 123 117 ... 119 123 118]
 ...
 [133 139 136 ... 111 106 108]
 [133 132 131 ... 116 111 103]
 [136 137 135 ... 114 111 108]]}
 {:key "10", :data #tech.v3.tensor&lt;int32&gt;[600 800]
[[125 120 120 ... 116 121 127]
 [116 122 116 ... 117 121 119]
 [120 121 115 ... 120 123 118]
 ...
 [132 139 133 ... 112 107 108]
 [135 132 132 ... 115 112 104]
 [134 135 135 ... 114 112 108]]})

```
</div>


Let us visualize a few of the tensors as images:


<div class="sourceClojure">
```clojure
(->> tensors
     (take 3)
     (mapcat (fn [row]
               [row
                (-> row
                    :data
                    (fun/* 200)
                    (vis.image/tensor->image
                     :ushort-gray))])))
```
</div>


<div><p>(</p><div style="margin-left:10%;width:110%;"><div><pre><code class="language-clojure">{:key "0", :data #tech.v3.tensor&lt;int32&gt;[600 800]
[[112 110 111 ... 114 118 124]
 [105 112 106 ... 115 120 119]
 [107 109 108 ... 117 123 115]
 ...
 [132 138 134 ... 109 107 109]
 [130 129 129 ... 115 111 103]
 [134 135 134 ... 110 111 110]]}
</code></pre></div><img src="scicloj.scrapbook.hdf_files/0.png" style="width:100%;" /><div><pre><code class="language-clojure">{:key "1", :data #tech.v3.tensor&lt;int32&gt;[600 800]
[[124 120 121 ... 117 121 124]
 [118 123 117 ... 118 122 121]
 [120 123 117 ... 119 123 118]
 ...
 [133 139 136 ... 111 106 108]
 [133 132 131 ... 116 111 103]
 [136 137 135 ... 114 111 108]]}
</code></pre></div><img src="scicloj.scrapbook.hdf_files/1.png" style="width:100%;" /><div><pre><code class="language-clojure">{:key "10", :data #tech.v3.tensor&lt;int32&gt;[600 800]
[[125 120 120 ... 116 121 127]
 [116 122 116 ... 117 121 119]
 [120 121 115 ... 120 123 118]
 ...
 [132 139 133 ... 112 107 108]
 [135 132 132 ... 115 112 104]
 [134 135 135 ... 114 112 108]]}
</code></pre></div><img src="scicloj.scrapbook.hdf_files/2.png" style="width:100%;" /></div><p>)</p></div>

<div style="background-color:grey;height:2px;width:100%;"></div>

<div><pre><small><small>source: /home/daslu/projects/scicloj/clojure-data-scrapbook/projects/data-sources/hdf/notebooks/scicloj/scrapbook/hdf.clj</small></small></pre></div>