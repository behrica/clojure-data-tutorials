
---
format:
  html: {toc: true, toc-depth: 4, theme: spacelab, output-file: index.html}
highlight-style: solarized
code-block-background: true
include-in-header: {text: '<link rel = "icon" href = "data:," />'}

---
<style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<script src="index_files/md-default13.js" type="text/javascript"></script><script src="index_files/md-default14.js" type="text/javascript"></script>
<table><tr><td>This is part of the Scicloj <a href="https://scicloj.github.io/clojure-data-scrapbook/">Clojure Data Scrapbook</a>.</td><a href="https://scicloj.github.io/clojure-data-scrapbook/"><img align="left" alt="SciCloj logo" src="https://scicloj.github.io/sci-cloj-logo-transparent.png" width="40" /></a></tr></table>


# Clay & Noj demo: image processing


<div class="sourceClojure">
```clojure
(ns index
  (:require [tech.v3.libs.buffered-image :as bufimg]
            [tech.v3.datatype :as dtype]
            [tech.v3.tensor :as tensor]
            [tech.v3.datatype.functional :as fun]
            [scicloj.noj.v1.vis.image :as vis.image]
            [scicloj.kindly.v4.kind :as kind]))
```
</div>



## Arithmetic


<div class="sourceClojure">
```clojure
(+ 1 2)
```
</div>



<div class="printedClojure">
```clojure
3

```
</div>



## Loading data


<div class="sourceClojure">
```clojure
(defonce raw-image
  (bufimg/load
   "https://upload.wikimedia.org/wikipedia/commons/1/1e/Gay_head_cliffs_MV.JPG"))
```
</div>



<div class="sourceClojure">
```clojure
(type raw-image)
```
</div>



<div class="printedClojure">
```clojure
java.awt.image.BufferedImage

```
</div>



<div class="sourceClojure">
```clojure
(bufimg/image-type raw-image)
```
</div>



<div class="printedClojure">
```clojure
:byte-bgr

```
</div>



## Displaying images


<div class="sourceClojure">
```clojure
raw-image
```
</div>


<img src="index_files/0.png" style="width:100%;" />


## Tensors


<div class="sourceClojure">
```clojure
(defonce raw-tensor
  (-> raw-image
      bufimg/as-ubyte-tensor))
```
</div>



<div class="sourceClojure">
```clojure
(dtype/shape raw-tensor)
```
</div>



<div class="printedClojure">
```clojure
[1478 2006 3]

```
</div>



## Processing


<div class="sourceClojure">
```clojure
[raw-image
 (-> raw-tensor
     (fun/* 0.5)
     (vis.image/tensor->image :byte-bgr))]
```
</div>


<div><p>\[</p><div style="margin-left:10%;width:110%;"><img src="index_files/0.png" style="width:100%;" /><img src="index_files/1.png" style="width:100%;" /></div><p>\]</p></div>


## Hiccup


<div class="sourceClojure">
```clojure
(kind/hiccup
 [:div
  [:h3 "raw image"]
  raw-image
  [:h3 "darkened image"]
  (-> raw-tensor
      (fun/* 0.5)
      (vis.image/tensor->image :byte-bgr))])
```
</div>


<div><h3>raw image</h3><img src="index_files/0.png" style="width:100%;" /><h3>darkened image</h3><img src="index_files/2.png" style="width:100%;" /></div>


## Colour channels


<div class="sourceClojure">
```clojure
(def colour-channels
  (-> raw-tensor
      (tensor/slice-right 1)))
```
</div>



<div class="sourceClojure">
```clojure
(def blue (colour-channels 0))
```
</div>



<div class="sourceClojure">
```clojure
(def green (colour-channels 1))
```
</div>



<div class="sourceClojure">
```clojure
(def red (colour-channels 2))
```
</div>



<div class="sourceClojure">
```clojure
(count colour-channels)
```
</div>



<div class="printedClojure">
```clojure
3

```
</div>



<div class="sourceClojure">
```clojure
(mapv dtype/shape colour-channels)
```
</div>



<div class="printedClojure">
```clojure
[[1478 2006] [1478 2006] [1478 2006]]

```
</div>



<div class="sourceClojure">
```clojure
(-> (tensor/compute-tensor (dtype/shape raw-tensor)
                           (fn [i j k]
                             (if (= k 2)
                               (raw-tensor i j k)
                               0))
                           :uint8)
    (vis.image/tensor->image :byte-bgr))
```
</div>


<img src="index_files/3.png" style="width:100%;" />


## Conditioned processing


<div class="sourceClojure">
```clojure
(-> (tensor/compute-tensor (dtype/shape raw-tensor)
                           (fn [i j k]
                             (*
                              (raw-tensor i j k)
                              (if (> (green i j)
                                     (blue i j))
                                0.3
                                1)))
                           :uint8)
    (vis.image/tensor->image :byte-bgr))
```
</div>


<img src="index_files/4.png" style="width:100%;" />


<div class="sourceClojure">
```clojure
(-> (tensor/compute-tensor (dtype/shape raw-tensor)
                           (fn [i j k]
                             (*
                              (raw-tensor i j k)
                              (if (> (green i j)
                                     (* 1.2 (blue i j)))
                                0.3
                                1)))
                           :uint8)
    (vis.image/tensor->image :byte-bgr))
```
</div>


<img src="index_files/5.png" style="width:100%;" />


<div class="sourceClojure">
```clojure
(->> [0.7 0.8 0.9 1 1.1 1.2 1.3]
     (map (fn [factor]
            [factor
             (-> (tensor/compute-tensor (dtype/shape raw-tensor)
                                        (fn [i j k]
                                          (*
                                           (raw-tensor i j k)
                                           (if (> (green i j)
                                                  (* factor (blue i j)))
                                             0.3
                                             1)))
                                        :uint8)
                 (vis.image/tensor->image :byte-bgr))])))
```
</div>


<div><p>(</p><div style="margin-left:10%;width:110%;"><div><p>\[</p><div style="margin-left:10%;width:110%;"><div><pre><code class="language-clojure">0.7
</code></pre></div><img src="index_files/6.png" style="width:100%;" /></div><p>\]</p></div><div><p>\[</p><div style="margin-left:10%;width:110%;"><div><pre><code class="language-clojure">0.8
</code></pre></div><img src="index_files/7.png" style="width:100%;" /></div><p>\]</p></div><div><p>\[</p><div style="margin-left:10%;width:110%;"><div><pre><code class="language-clojure">0.9
</code></pre></div><img src="index_files/8.png" style="width:100%;" /></div><p>\]</p></div><div><p>\[</p><div style="margin-left:10%;width:110%;"><div><pre><code class="language-clojure">1
</code></pre></div><img src="index_files/9.png" style="width:100%;" /></div><p>\]</p></div><div><p>\[</p><div style="margin-left:10%;width:110%;"><div><pre><code class="language-clojure">1.1
</code></pre></div><img src="index_files/10.png" style="width:100%;" /></div><p>\]</p></div><div><p>\[</p><div style="margin-left:10%;width:110%;"><div><pre><code class="language-clojure">1.2
</code></pre></div><img src="index_files/11.png" style="width:100%;" /></div><p>\]</p></div><div><p>\[</p><div style="margin-left:10%;width:110%;"><div><pre><code class="language-clojure">1.3
</code></pre></div><img src="index_files/12.png" style="width:100%;" /></div><p>\]</p></div></div><p>)</p></div>

<div style="background-color:grey;height:2px;width:100%;"></div>

<div><pre><small><small>source: <a href="https://github.com/scicloj/clojure-data-scrapbook/blob/main/projects/visual-tools/clay-cider-demo-20231217/notebooks/index.clj">projects/visual-tools/clay-cider-demo-20231217/notebooks/index.clj</a></small></small></pre></div>