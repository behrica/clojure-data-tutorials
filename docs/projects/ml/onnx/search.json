[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Using ONNX models from clojure",
    "section": "",
    "text": "This is part of the Scicloj Clojure Data Scrapbook.\n\n1 Preface\nONNX is an upcoming exchange format for machine learning models. It is platform indepedent and allows, for example, to train models in python, export the trained model into a file, and then use it in Java / Clojure for inference\n\nsource: projects/ml/onnx/notebooks/index.clj",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preface</span>"
    ]
  },
  {
    "objectID": "onnx.html",
    "href": "onnx.html",
    "title": "2  Using ONNX models from Clojure",
    "section": "",
    "text": "2.1 Load and inspect ONNX file\nWe use here a model which was trained on the well know iris data and can predict the species\nWe can inspect the model and among other things discover which input format it needs.\nThis shows us that it has one input called “float_input” which needs to be a 2D tensor with dimensions (anyNumber, 4) This matches our knowledge on the iris data, which has 4 columns (+ prediction)\nIn a similar way we can introspect the output after inference:\nThis outputs one value for each row of the input, which matches as well the iris data. Now we need to construct an instance of ai.onnxruntime.OnnxTensor of shape [-1,4] This can be done starting from a vector-of-vector, for example",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Using ONNX models from Clojure</span>"
    ]
  },
  {
    "objectID": "onnx.html#load-and-inspect-onnx-file",
    "href": "onnx.html#load-and-inspect-onnx-file",
    "title": "2  Using ONNX models from Clojure",
    "section": "",
    "text": "(def env (OrtEnvironment/getEnvironment))\n\n\n(def session (.createSession env \"logreg_iris.onnx\"))\n\n\n\n(j/from-java-deep\n (.getInputInfo session)\n {})\n\n\n{\"float_input\"\n {:info\n  {:dimensionNames (\"\" \"\"),\n   :numElements -4,\n   :scalar false,\n   :shape (-1 4)},\n  :name \"float_input\"}}\n\n\n\n\n(j/from-java-deep\n (.getOutputInfo session)\n {})\n\n\n{\"output_label\"\n {:info\n  {:dimensionNames (\"\"), :numElements -1, :scalar false, :shape (-1)},\n  :name \"output_label\"},\n \"output_probability\"\n {:info {:sequenceOfMaps true}, :name \"output_probability\"}}",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Using ONNX models from Clojure</span>"
    ]
  },
  {
    "objectID": "onnx.html#run-inference-on-arrays",
    "href": "onnx.html#run-inference-on-arrays",
    "title": "2  Using ONNX models from Clojure",
    "section": "2.2 Run inference on arrays",
    "text": "2.2 Run inference on arrays\n\n(def input-data\n  [[7   0.5  0.5 0.5]\n   [0.5 1    1     1]])\n\n\n(def tensor (OnnxTensor/createTensor\n             env\n             (into-array (map float-array input-data))))\n\n\ntensor\n\n\n#object[ai.onnxruntime.OnnxTensor 0x185e0148 \"OnnxTensor(info=TensorInfo(javaType=FLOAT,onnxType=ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT,shape=[2, 4]),closed=false)\"]\n\n\n(def prediction (.run session {\"float_input\" tensor}))\n\n\nprediction\n\n\n#object[ai.onnxruntime.OrtSession$Result 0x54c976be \"ai.onnxruntime.OrtSession$Result@54c976be\"]\n\nWe have two things in prediction result:\n\n(map key prediction)\n\n\n(\"output_label\" \"output_probability\")\n\nnamely predicted labels and probabilities We need a bit of inter-op to get the numbers out of the prediction predicted species:\n\n(-&gt;  prediction first val .getValue)\n\n\n[0, 0]\n\nprobability distribution for each species for all labels:\n\n(map\n #(.getValue %)\n (-&gt;  prediction second val .getValue))\n\n\n({0 0.6436056, 1 0.35639435, 2 8.642593E-8}\n {0 0.99678445, 1 0.0032155933, 2 4.3943203E-8})",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Using ONNX models from Clojure</span>"
    ]
  },
  {
    "objectID": "onnx.html#run-inference-on-tech.dataset",
    "href": "onnx.html#run-inference-on-tech.dataset",
    "title": "2  Using ONNX models from Clojure",
    "section": "2.3 Run inference on tech.dataset",
    "text": "2.3 Run inference on tech.dataset\nIn case we have our data in a tech.ml.dataset\n\n(def ds\n  (tc/dataset [[0.5 0.5 0.5 0.5]\n               [1   1   1   1]\n               [1   1   2   7]\n               [3   1   2   1]\n               [7   8   2   10]]))\n\nwe can convert it to a tensor as well easily\n\n(def tensor-2 \n  (OnnxTensor/createTensor \n      env \n     (into-array (map float-array (tc/rows ds)))))\n\nRunning predictions is then the same.\n\n(def prediction-2 (.run session {\"float_input\" tensor-2}))\n\n\n(.. prediction-2 (get 0) getValue)\n\n\n[0, 0, 2, 0, 2]\n\nOverall we can use any ONNX model from Clojure. This allows polyglot scenarios where data preprocession and model evaluation is done in Clojure, while training is done in Python with its huge ecosystem of ML models.\nHoefuly overtime the ONNX standard will see widespread use. Most sklearn models/pipelines can be exported to ONNX using sklear-onnx\n\nsource: projects/ml/onnx/notebooks/onnx.clj",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Using ONNX models from Clojure</span>"
    ]
  }
]