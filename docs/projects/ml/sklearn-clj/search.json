[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Use sklearn-clj",
    "section": "",
    "text": "1 sklearn-clj\nsklearn-clj is a Clojure library which allows to use all sklearn estimators (models and others) from Clojure. It uses libpython-clj behind the scenes but we do not need to use the libpython-clj API. All models are available via the standard Clojure functions in metamorph.ml.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>sklearn-clj</span>"
    ]
  },
  {
    "objectID": "index.html#use-iris-data",
    "href": "index.html#use-iris-data",
    "title": "Use sklearn-clj",
    "section": "2.1 Use iris data",
    "text": "2.1 Use iris data\nLets first get our data, the well known iris dataset:\n\n(def iris\n  (-&gt; (toydata/iris-ds)\n      (ds-mod/set-inference-target :species)\n      (ds/categorical-&gt;number [:species])))",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>sklearn-clj</span>"
    ]
  },
  {
    "objectID": "index.html#register-models",
    "href": "index.html#register-models",
    "title": "Use sklearn-clj",
    "section": "2.2 Register models",
    "text": "2.2 Register models\nThis require will register all sklearn models and make them available to metamorph.ml\n\n(require '[scicloj.sklearn-clj.ml])",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>sklearn-clj</span>"
    ]
  },
  {
    "objectID": "index.html#define-metamorph-pipeline",
    "href": "index.html#define-metamorph-pipeline",
    "title": "Use sklearn-clj",
    "section": "2.3 Define metamorph pipeline",
    "text": "2.3 Define metamorph pipeline\nAll models are available by specifying keys in form of :sklearn.xxx.yyy for the model type. The available models are listed in the annex. They take the same parameters as in sklearn, just in kebap case.\nWe define a normal metamorph.ml pipeline, as we would do with Clojure models.\n\n(def pipe-fn\n  (mm/pipeline\n   {:metamorph/id :model}\n   (ml/model {:model-type :sklearn.classification/logistic-regression\n              :max-iter 1000\n              :verbose true})))\n\nIt will use sklearn model “sklearn.linear_model.LogisticRegression”",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>sklearn-clj</span>"
    ]
  },
  {
    "objectID": "index.html#use-tech.dataset-as-training-data",
    "href": "index.html#use-tech.dataset-as-training-data",
    "title": "Use sklearn-clj",
    "section": "2.4 Use tech.dataset as training data",
    "text": "2.4 Use tech.dataset as training data\nWe need to train the model using a tech.ml.dataset as training data. sklearn-clj will transform the data behind the scenes to a tech.v3.tensor, which libpython-clj auto-transforms to a numpy array , which the model can work with.\n\n(def trained-ctx (mm/fit-pipe iris pipe-fn))\n\n\ntrained-ctx\n\n{\n\n\n\n\n\n\n\n\n:metamorph/data\n\n\n\n_unnamed [150 5]:\n\n\n\n:sepal_length\n:sepal_width\n:petal_length\n:petal_width\n:species\n\n\n\n\n5.1\n3.5\n1.4\n0.2\n0.0\n\n\n4.9\n3.0\n1.4\n0.2\n0.0\n\n\n4.7\n3.2\n1.3\n0.2\n0.0\n\n\n4.6\n3.1\n1.5\n0.2\n0.0\n\n\n5.0\n3.6\n1.4\n0.2\n0.0\n\n\n5.4\n3.9\n1.7\n0.4\n0.0\n\n\n4.6\n3.4\n1.4\n0.3\n0.0\n\n\n5.0\n3.4\n1.5\n0.2\n0.0\n\n\n4.4\n2.9\n1.4\n0.2\n0.0\n\n\n4.9\n3.1\n1.5\n0.1\n0.0\n\n\n...\n...\n...\n...\n...\n\n\n6.9\n3.1\n5.4\n2.1\n2.0\n\n\n6.7\n3.1\n5.6\n2.4\n2.0\n\n\n6.9\n3.1\n5.1\n2.3\n2.0\n\n\n5.8\n2.7\n5.1\n1.9\n2.0\n\n\n6.8\n3.2\n5.9\n2.3\n2.0\n\n\n6.7\n3.3\n5.7\n2.5\n2.0\n\n\n6.7\n3.0\n5.2\n2.3\n2.0\n\n\n6.3\n2.5\n5.0\n1.9\n2.0\n\n\n6.5\n3.0\n5.2\n2.0\n2.0\n\n\n6.2\n3.4\n5.4\n2.3\n2.0\n\n\n5.9\n3.0\n5.1\n1.8\n2.0\n\n\n\n\n\n\n\n\n:metamorph/mode :fit:model {:model-data {:model LogisticRegression(max_iter=1000, verbose=True), :predict-proba? true, :pickled-model #object[\"[S\" 0x3cdd3349 \"[S@3cdd3349\"], :attributes {:n_features_in_ 4, :coef_ [[-0.42456599  0.96664261 -2.51554625 -1.08216927]\n [ 0.53541119 -0.32073935 -0.20740629 -0.94263206]\n [-0.1108452  -0.64590325  2.72295254  2.02480133]], :intercept_ [  9.85494228   2.23117432 -12.0861166 ], :n_iter_ [109], :classes_ [0. 1. 2.]}}, :options {:model-type :sklearn.classification/logistic-regression, :max-iter 1000, :verbose true}, :id #uuid \"833e6a6b-34db-47fa-ab17-354403882f85\", :feature-columns [:sepal_length :sepal_width :petal_length :petal_width], :target-columns [:species], :target-categorical-maps {:species #tech.v3.dataset.categorical.CategoricalMap{:lookup-table {0 0, 1 1, 2 2}, :src-column :species, :result-datatype :float64}}, :scicloj.metamorph.ml/unsupervised? nil}}",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>sklearn-clj</span>"
    ]
  },
  {
    "objectID": "index.html#inspect-trained-model",
    "href": "index.html#inspect-trained-model",
    "title": "Use sklearn-clj",
    "section": "2.5 Inspect trained model",
    "text": "2.5 Inspect trained model\nWe can inspect the model object:\n\n(def model-object\n  (-&gt; trained-ctx :model :model-data :model))\n\nIt’s a libpython-clj reference to a python object\n\nmodel-object\n\n\nLogisticRegression(max_iter=1000, verbose=True)\n\nand use libpython-clj functions to get information out of it. We can get the models coefficients, for example:\n\n(py/-&gt;jvm\n  (py.- model-object coef_))\n\n\n#tech.v3.tensor&lt;float64&gt;[3 4]\n[[-0.4246  0.9666  -2.516  -1.082]\n [ 0.5354 -0.3207 -0.2074 -0.9426]\n [-0.1108 -0.6459   2.723   2.025]]\n\nwe can as well ask for predict on new data\n\n(def simulated-new-data \n  (tc/head (tc/shuffle iris) 10) )\n\n\n(def prediction\n  (-&gt;\n   (:metamorph/data\n    (mm/transform-pipe \n     simulated-new-data  \n     pipe-fn \n     trained-ctx))\n   ds-cat/reverse-map-categorical-xforms))\n\nWe get a tech.ml.dataset with the prediction result back. sklearn-clj auto-transform the prediction result back to a tech.ml.dataset\n\nprediction\n\n\n:_unnamed [10 4]:\n\n\n\n0\n1\n2\n:species\n\n\n\n\n0.00872745\n0.77461592\n2.16656626E-01\n1\n\n\n0.98659131\n0.01340868\n1.29649648E-08\n0\n\n\n0.97701547\n0.02298451\n1.75129179E-08\n0\n\n\n0.00699746\n0.86006552\n1.32937015E-01\n1\n\n\n0.00107238\n0.45647594\n5.42451683E-01\n2\n\n\n0.98892134\n0.01107866\n5.36089332E-09\n0\n\n\n0.96929487\n0.03070504\n8.66047682E-08\n0\n\n\n0.00000065\n0.00574967\n9.94249673E-01\n2\n\n\n0.00000789\n0.02726308\n9.72729032E-01\n2\n\n\n0.00005567\n0.12293040\n8.77013924E-01\n2",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>sklearn-clj</span>"
    ]
  }
]