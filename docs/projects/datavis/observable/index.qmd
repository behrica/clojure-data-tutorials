
---
format:
  html: {toc: true, toc-depth: 4, theme: spacelab, output-file: index.html}
code-block-background: true
include-in-header: {text: '<link rel = "icon" href = "data:," />'}

---
<style></style><style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<script src="index_files/md-default0.js" type="text/javascript"></script><script src="index_files/md-default1.js" type="text/javascript"></script>

```{=html}
<table><tr><td>This is part of the Scicloj <a href="https://scicloj.github.io/clojure-data-scrapbook/">Clojure Data Scrapbook</a>.</td><a href="https://scicloj.github.io/clojure-data-scrapbook/"><img align="left" alt="SciCloj logo" src="https://scicloj.github.io/sci-cloj-logo-transparent.png" width="40" /></a></tr></table>
```



::: {.sourceClojure}
```clojure
(ns index
  (:require [codegen :refer [obs]]))
```
:::



# Observable examples

We will use the draft [codegen](./codegen) namespace.


## A basic example

Note that we read the data from a file,
that we can conveniently generate in Clojure.

We follow [a basic example]((https://quarto.org/docs/interactive/ojs/libraries.html#plot))
from Quarto's Observable docs.


::: {.sourceClojure}
```clojure
(obs
 '(def athletes
    (. (FileAttachment "notebooks/datasets/athletes.csv")
       (csv {:typed true}))))
```
:::



```{ojs}
//| echo: false
athletes = FileAttachment("notebooks/datasets/athletes.csv").csv({typed: true})
```


::: {.sourceClojure}
```clojure
(obs
 '(Plot.plot {:grid true
              :facet {:data athletes
                      :y "sex"}
              :marks [(Plot.rectY athletes
                                  (Plot.binX {:y "count"}
                                             {:x "weight" :fill "sex"}))
                      (Plot.ruleY [0])]}))
```
:::



```{ojs}
//| echo: false
Plot.plot({grid: true, facet: {data: athletes, y: "sex"}, marks: [Plot.rectY(athletes, Plot.binX({y: "count"}, {x: "weight", fill: "sex"})), Plot.ruleY([0])]})
```


## Interactions across components
Here, we reproduce
[the penguins example](https://quarto.org/docs/interactive/ojs/examples/penguins.html)
from the Quarto docs.


::: {.sourceClojure}
```clojure
(obs
 '(viewof bill_length_min
          (Inputs.range [32 50]
                        {:value 35
                         :step 1
                         :label "Bill length (min):"}))
 '(viewof islands
          (Inputs.checkbox ["Torgersen" "Biscoe" "Dream"]
                           {:value ["Torgensen" "Biscoe"]
                            :lable "Islands:"}))
 '(. (Plot.rectY filtered
                 (Plot.binX {:y "count"}
                            {:x "body_mass_g"
                             :fill "species"
                             :thresholds 20}))
     (plot {:facet {:data filtered
                    :x "sex"
                    :y "species"
                    :marginRight 80}
            :marks [(Plot.frame)]}))
 '(Inputs.table filtered)
 '(def penguins (. (FileAttachment "notebooks/datasets/palmer-penguins.csv")
                   (csv {:typed true})))
 '(def filtered (. penguins
                   (filter [:js "function(penguin) {
                                           return bill_length_min < penguin.bill_length_mm &&
                                           islands.includes(penguin.island);
                                           }"]))))
```
:::



```{ojs}
//| echo: false
viewof bill_length_min = Inputs.range([32, 50], {value: 35, step: 1, label: "Bill length (min):"})

viewof islands = Inputs.checkbox(["Torgersen", "Biscoe", "Dream"], {value: ["Torgensen", "Biscoe"], lable: "Islands:"})

Plot.rectY(filtered, Plot.binX({y: "count"}, {x: "body_mass_g", fill: "species", thresholds: 20})).plot({facet: {data: filtered, x: "sex", y: "species", marginRight: 80}, marks: [Plot.frame()]})

Inputs.table(filtered)

penguins = FileAttachment("notebooks/datasets/palmer-penguins.csv").csv({typed: true})

filtered = penguins.filter(function(penguin) {
                                           return bill_length_min < penguin.bill_length_mm &&
                                           islands.includes(penguin.island);
                                           })
```


```{=html}
<div style="background-color:grey;height:2px;width:100%;"></div>
```



```{=html}
<div><pre><small><small>source: <a href="https://github.com/scicloj/clojure-data-scrapbook/blob/main/projects/datavis/observable/notebooks/index.clj">projects/datavis/observable/notebooks/index.clj</a></small></small></pre></div>
```
