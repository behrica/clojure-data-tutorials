
---
format:
  html: {toc: true, toc-depth: 4, theme: spacelab, output-file: codegen.html}
code-block-background: true
include-in-header: {text: '<link rel = "icon" href = "data:," />'}

---
<style></style><style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<script src="codegen_files/md-default0.js" type="text/javascript"></script><script src="codegen_files/md-default1.js" type="text/javascript"></script>

# Generating Observable code


::: {.sourceClojure}
```clojure
(ns codegen
  (:require [scicloj.kindly.v4.kind :as kind]
            [clojure.string :as str]))
```
:::


This is a draft experiment of generating [Observable](https://observablehq.com/) code from Clojure forms.


::: {.sourceClojure}
```clojure
(defn list-starting-with? [prefix form]
  (and (list? form)
       (-> form first (= prefix))))
```
:::



::: {.sourceClojure}
```clojure
(defn vector-starting-with? [prefix form]
  (and (vector? form)
       (-> form first (= prefix))))
```
:::



::: {.sourceClojure}
```clojure
(defn dot? [form]
  (list-starting-with? '. form))
```
:::



::: {.sourceClojure}
```clojure
(defn def? [form]
  (list-starting-with? 'def form))
```
:::



::: {.sourceClojure}
```clojure
(defn viewof? [form]
  (list-starting-with? 'viewof form))
```
:::



::: {.sourceClojure}
```clojure
(defn generated? [form]
  (vector-starting-with? :generated form))
```
:::



::: {.sourceClojure}
```clojure
(defn generated [string]
  (assert (string? string))
  [:generated string])
```
:::



::: {.sourceClojure}
```clojure
(defn generated->str [form]
  (second form))
```
:::



::: {.sourceClojure}
```clojure
(defn js? [form]
  (vector-starting-with? :js form))
```
:::



::: {.sourceClojure}
```clojure
(defn primitive? [form]
  (or (string? form)
      (number? form)
      (boolean? form)
      (symbol? form)))
```
:::



::: {.sourceClojure}
```clojure
(defn handle-form [form]
  (cond (generated? form) (generated->str form)
        (map? form) (->> form
                         (map (fn [[k v]]
                                (format "%s: %s"
                                        (name k) (handle-form v))))
                         (str/join ", ")
                         (format "{%s}"))
        (dot? form) (->> form
                         rest
                         (map handle-form)
                         (str/join "."))
        (def? form) (let [[lhs rhs] (rest form)]
                      (format "%s = %s"
                              (name lhs)
                              (handle-form rhs)))
        (viewof? form) (let [[lhs rhs] (rest form)]
                         (format "viewof %s = %s"
                                 (name lhs)
                                 (handle-form rhs)))
        (js? form) (-> form
                       second
                       str)
        (list? form)  (->> form
                           rest
                           (map handle-form)
                           (str/join ", ")
                           (format "%s(%s)" (-> form first name)))
        (vector? form) (->> form
                            (map handle-form)
                            (str/join ", ")
                            (format "[%s]"))
        (primitive? form) (pr-str form)))
```
:::



::: {.sourceClojure}
```clojure
(defn obs [& forms]
  (->> forms
       (map handle-form)
       (str/join "\n\n")
       kind/observable))
```
:::



```{=html}
<div style="background-color:grey;height:2px;width:100%;"></div>
```



```{=html}
<div><pre><small><small>source: <a href="https://github.com/scicloj/clojure-data-scrapbook/blob/main/projects/datavis/observable/notebooks/codegen.clj">projects/datavis/observable/notebooks/codegen.clj</a></small></small></pre></div>
```
