[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Clojure Data Scrapbook",
    "section": "",
    "text": "Preface\nThis is the Clojure Data Scrapbook."
  },
  {
    "objectID": "copies_of_projects/main/docs/scicloj/scrapbook/visualization_quarto.html#visualizing-datases-with-hanami",
    "href": "copies_of_projects/main/docs/scicloj/scrapbook/visualization_quarto.html#visualizing-datases-with-hanami",
    "title": "1  Data visualization",
    "section": "1.1 Visualizing datases with Hanami",
    "text": "1.1 Visualizing datases with Hanami\n\n(kind/vega-lite\n (hc/xform ht/point-chart\n           :DATA (-> dataset1\n                     (tc/rows :as-maps)\n                     vec)\n           :MSIZE 200))\n\n\n…"
  },
  {
    "objectID": "copies_of_projects/main/docs/scicloj/scrapbook/visualization_quarto.html#visualizing-datases-with-hanami-using-noj",
    "href": "copies_of_projects/main/docs/scicloj/scrapbook/visualization_quarto.html#visualizing-datases-with-hanami-using-noj",
    "title": "1  Data visualization",
    "section": "1.2 Visualizing datases with Hanami using Noj",
    "text": "1.2 Visualizing datases with Hanami using Noj\n\n(-> dataset1\n    (vis/hanami-plot ht/point-chart\n                     :MSIZE 200))\n\n\n…\n\n\n…\n\n\n…"
  },
  {
    "objectID": "copies_of_projects/main/docs/scicloj/scrapbook/python_quarto.html#using-python-visualizations",
    "href": "copies_of_projects/main/docs/scicloj/scrapbook/python_quarto.html#using-python-visualizations",
    "title": "2  Python interop",
    "section": "2.1 Using Python visualizations",
    "text": "2.1 Using Python visualizations\n\n(require-python '[numpy :as np]\n                '[numpy.random :as np.random]\n                'matplotlib.pyplot\n                '[seaborn :as sns]\n                'json)\n\n\n:ok\n\n\n(def sine-data\n  (-> {:x (range 0 (* 3 np/pi) 0.1)}\n      tc/dataset\n      (tc/add-column :y #(fun/sin (:x %)))))\n\n\n…\n\n\n(vis.python/with-pyplot\n  ;; http://gigasquidsoftware.com/blog/2020/01/18/parens-for-pyplot/\n  (matplotlib.pyplot/plot\n   (:x sine-data)\n   (:y sine-data)))\n\n\n…\n\n\n(vis.python/pyplot\n #(matplotlib.pyplot/plot\n   (:x sine-data)\n   (:y sine-data)))\n\n\n…\n\nhttps://seaborn.pydata.org/tutorial/introduction\n\n(let [tips (sns/load_dataset \"tips\")]\n  (sns/set_theme)\n  (vis.python/pyplot\n   #(sns/relplot :data tips\n                 :x \"total_bill\"\n                 :y \"tip\"\n                 :col \"time\"\n                 :hue \"smoker\"\n                 :style \"smoker\"\n                 :size \"size\")))\n\n\n…\n\n\n…\n\n\n…"
  },
  {
    "objectID": "copies_of_projects/main/docs/scicloj/scrapbook/tests_quarto.html",
    "href": "copies_of_projects/main/docs/scicloj/scrapbook/tests_quarto.html",
    "title": "3  Tests",
    "section": "",
    "text": "…\n\n\n…\n\n\n(ns scicloj.scrapbook.tests\n  (:require [tablecloth.api :as tc]\n            [scicloj.kindly.v3.kind :as kind]\n            [scicloj.clay.v2.api :as clay\n             :refer [is->]]))\n\n\n…\n\n\n3.0.1 clojure.test\nStandard Clojure tests may be integrated into notebooks.\n\n(require '[clojure.test :refer [deftest is]])\n\n\nnil\n\nTests returning a boolean value (as they usually do, ending with a check) are rendered displaying that value as a clear x (failure) or v (success) mark:\n\n(def test-dataset\n  (tc/dataset {:x [1 2 3]\n               :y [4 5 6]}))\n\n\n…\n\n\n(deftest mytest1\n  (-> test-dataset\n      tc/row-count\n      (= 3)\n      is))\n\n\n…\n\nTests returning a non-boolean value are rendered simply displaying that value:\n\n(deftest mytest2\n  (-> test-dataset\n      tc/row-count\n      (= 3)\n      is)\n  test-dataset)\n\n\n…\n\nThe is-> function allows performing a few checks in a pipeline and returning a different value to be displayed:\n\n(deftest mytest3\n  (-> 2\n      (+ 3)\n      (is-> > 4)\n      (* 10)\n      (is-> = 50)\n      (* 10)))\n\n\n500\n\nThese features open the way for literate testing / testable documentation solutions, such as those we have been using in the past (e.g., in tutorials of ClojisR using Notespace v2).\n\n…\n\n\n…"
  },
  {
    "objectID": "copies_of_projects/hdf/docs/scicloj/scrapbook/hdf_quarto.html",
    "href": "copies_of_projects/hdf/docs/scicloj/scrapbook/hdf_quarto.html",
    "title": "4  Processing HDF files",
    "section": "",
    "text": "(ns scicloj.scrapbook.hdf\n  (:require [babashka.fs :as fs]\n            [tech.v3.tensor :as tensor]\n            [clojure.java.io :as io]\n            [clojure.string :as string]\n            [scicloj.noj.v1.vis.image :as vis.image]\n            [tech.v3.datatype.functional :as fun])\n  (:import io.jhdf.HdfFile\n           java.io.File))\n\n\n…\n\n\n(set! *warn-on-reflection* true)\n\n\ntrue\n\n\n(defn hdf5->tensors [path]\n  (let [file ^File (io/file path)\n        hdf-file ^HdfFile (HdfFile. file)\n        children ^java.util.Map (.getChildren hdf-file)]\n    (->> children\n         keys\n         (mapv (fn [key]\n                 (let [child ^io.jhdf.dataset.ContiguousDatasetImpl (.get children key)\n                       knew (keyword (first (string/split key\n                                                          #\" \")))]\n                   {:key key\n                    :data (-> child\n                              .getData\n                              tensor/->tensor)}))))))\n\n\n…\n\n\n(def tensors\n  (hdf5->tensors \"data/test.h5\"))\n\n\n…\n\n\n(count tensors)\n\n\n20\n\n\n(take 3 tensors)\n\n\n({:key \"0\", :data #tech.v3.tensor&lt;int32&gt;[600 800]\n[[112 110 111 ... 114 118 124]\n [105 112 106 ... 115 120 119]\n [107 109 108 ... 117 123 115]\n ...\n [132 138 134 ... 109 107 109]\n [130 129 129 ... 115 111 103]\n [134 135 134 ... 110 111 110]]}\n {:key \"1\", :data #tech.v3.tensor&lt;int32&gt;[600 800]\n[[124 120 121 ... 117 121 124]\n [118 123 117 ... 118 122 121]\n [120 123 117 ... 119 123 118]\n ...\n [133 139 136 ... 111 106 108]\n [133 132 131 ... 116 111 103]\n [136 137 135 ... 114 111 108]]}\n {:key \"10\", :data #tech.v3.tensor&lt;int32&gt;[600 800]\n[[125 120 120 ... 116 121 127]\n [116 122 116 ... 117 121 119]\n [120 121 115 ... 120 123 118]\n ...\n [132 139 133 ... 112 107 108]\n [135 132 132 ... 115 112 104]\n [134 135 135 ... 114 112 108]]})\n\n\n(->> tensors\n     (take 3)\n     (mapcat (fn [row]\n               [row\n                (-> row\n                    :data\n                    (fun/* 200)\n                    (vis.image/tensor->image\n                     :ushort-gray))])))\n\n\n…"
  }
]